stages:
  - build
  - deploy

docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - apk update -qy && apk add --no-cache curl unzip bash
    - apk add --no-cache python3 && python3 -m ensurepip &&  rm -r /usr/lib/python*/ensurepip && pip3 install --upgrade pip setuptools && if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && rm -r /root/.cache
    - pip3 install awscli
  stage: build
  script:
    - aws ecr get-login-password --region $AWS_IMAGE_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_IMAGE_REGION.amazonaws.com
    - docker build -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

deploy-to-aws:
  stage: deploy
  image:
    name: alpine/k8s:1.26.1
    entrypoint: [""]
  script:
    - aws --version
    - aws eks --region $AWS_KUBE_REGION update-kubeconfig --name $AWS_KUBE_NAME
    - kubectl version --client
    - kubectl apply -f eks/eks.yaml
    - kubectl rollout restart deployment $DEPLOYMENT_NAME -n $NAME_SPACE